


  a=>b,

   a=>F(b)

   F[A] => F[B] =  fa => m.flatMap(fa)(A=>F[B])

   a*f*F = a*F*f'

     f*F = F*f'
     f = F*f'*FË†{-1}
 
         m.pure(a).flatMap(f)

   F[a=>b] ~ m.pure(a -> m.flatMap(f'(a))(identity))
                    a =>           F[b] 
   
   

    F[a=>F[b]].flatMap(f' => )

```

  f(x->y,g) = async( ...  )

  f(x->fy,g) = f( x => await y, g) = f'(x ->fy, g)

in f body:
  f(x) => await(f'(x))
  g(f) => g'(f)
  
```

 
